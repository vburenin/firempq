// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/snsproto/dbdata/topic_data.proto

package dbdata

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Subscription struct {
	Arn                  string   `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	Owner                string   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Endpoint             string   `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Protocol             string   `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	RawDelivery          bool     `protobuf:"varint,5,opt,name=raw_delivery,json=rawDelivery,proto3" json:"raw_delivery,omitempty"`
	Pending              bool     `protobuf:"varint,6,opt,name=pending,proto3" json:"pending,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_topic_data_8a03cff7910f518f, []int{0}
}
func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(dst, src)
}
func (m *Subscription) XXX_Size() int {
	return m.Size()
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetArn() string {
	if m != nil {
		return m.Arn
	}
	return ""
}

func (m *Subscription) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Subscription) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Subscription) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Subscription) GetRawDelivery() bool {
	if m != nil {
		return m.RawDelivery
	}
	return false
}

func (m *Subscription) GetPending() bool {
	if m != nil {
		return m.Pending
	}
	return false
}

type Topic struct {
	Arn                     string                   `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	Name                    string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName             string                   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Policy                  string                   `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	DeliveryPolicy          string                   `protobuf:"bytes,5,opt,name=delivery_policy,json=deliveryPolicy,proto3" json:"delivery_policy,omitempty"`
	EffectiveDeliveryPolicy string                   `protobuf:"bytes,6,opt,name=effective_delivery_policy,json=effectiveDeliveryPolicy,proto3" json:"effective_delivery_policy,omitempty"`
	DeletedSubscriptions    int64                    `protobuf:"varint,7,opt,name=deleted_subscriptions,json=deletedSubscriptions,proto3" json:"deleted_subscriptions,omitempty"`
	SqsSubscriptions        map[string]*Subscription `protobuf:"bytes,8,rep,name=sqs_subscriptions,json=sqsSubscriptions" json:"sqs_subscriptions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	OtherSubscriptions      map[string]*Subscription `protobuf:"bytes,9,rep,name=other_subscriptions,json=otherSubscriptions" json:"other_subscriptions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral    struct{}                 `json:"-"`
	XXX_sizecache           int32                    `json:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_topic_data_8a03cff7910f518f, []int{1}
}
func (m *Topic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(dst, src)
}
func (m *Topic) XXX_Size() int {
	return m.Size()
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetArn() string {
	if m != nil {
		return m.Arn
	}
	return ""
}

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Topic) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Topic) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *Topic) GetDeliveryPolicy() string {
	if m != nil {
		return m.DeliveryPolicy
	}
	return ""
}

func (m *Topic) GetEffectiveDeliveryPolicy() string {
	if m != nil {
		return m.EffectiveDeliveryPolicy
	}
	return ""
}

func (m *Topic) GetDeletedSubscriptions() int64 {
	if m != nil {
		return m.DeletedSubscriptions
	}
	return 0
}

func (m *Topic) GetSqsSubscriptions() map[string]*Subscription {
	if m != nil {
		return m.SqsSubscriptions
	}
	return nil
}

func (m *Topic) GetOtherSubscriptions() map[string]*Subscription {
	if m != nil {
		return m.OtherSubscriptions
	}
	return nil
}

type TopicNames struct {
	Topics               []string `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicNames) Reset()         { *m = TopicNames{} }
func (m *TopicNames) String() string { return proto.CompactTextString(m) }
func (*TopicNames) ProtoMessage()    {}
func (*TopicNames) Descriptor() ([]byte, []int) {
	return fileDescriptor_topic_data_8a03cff7910f518f, []int{2}
}
func (m *TopicNames) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicNames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicNames.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TopicNames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicNames.Merge(dst, src)
}
func (m *TopicNames) XXX_Size() int {
	return m.Size()
}
func (m *TopicNames) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicNames.DiscardUnknown(m)
}

var xxx_messageInfo_TopicNames proto.InternalMessageInfo

func (m *TopicNames) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func init() {
	proto.RegisterType((*Subscription)(nil), "dbdata.Subscription")
	proto.RegisterType((*Topic)(nil), "dbdata.Topic")
	proto.RegisterMapType((map[string]*Subscription)(nil), "dbdata.Topic.OtherSubscriptionsEntry")
	proto.RegisterMapType((map[string]*Subscription)(nil), "dbdata.Topic.SqsSubscriptionsEntry")
	proto.RegisterType((*TopicNames)(nil), "dbdata.TopicNames")
}
func (m *Subscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subscription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arn) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopicData(dAtA, i, uint64(len(m.Arn)))
		i += copy(dAtA[i:], m.Arn)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopicData(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.Endpoint) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopicData(dAtA, i, uint64(len(m.Endpoint)))
		i += copy(dAtA[i:], m.Endpoint)
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopicData(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if m.RawDelivery {
		dAtA[i] = 0x28
		i++
		if m.RawDelivery {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Pending {
		dAtA[i] = 0x30
		i++
		if m.Pending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Topic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Topic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arn) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopicData(dAtA, i, uint64(len(m.Arn)))
		i += copy(dAtA[i:], m.Arn)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopicData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.DisplayName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopicData(dAtA, i, uint64(len(m.DisplayName)))
		i += copy(dAtA[i:], m.DisplayName)
	}
	if len(m.Policy) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopicData(dAtA, i, uint64(len(m.Policy)))
		i += copy(dAtA[i:], m.Policy)
	}
	if len(m.DeliveryPolicy) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTopicData(dAtA, i, uint64(len(m.DeliveryPolicy)))
		i += copy(dAtA[i:], m.DeliveryPolicy)
	}
	if len(m.EffectiveDeliveryPolicy) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTopicData(dAtA, i, uint64(len(m.EffectiveDeliveryPolicy)))
		i += copy(dAtA[i:], m.EffectiveDeliveryPolicy)
	}
	if m.DeletedSubscriptions != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTopicData(dAtA, i, uint64(m.DeletedSubscriptions))
	}
	if len(m.SqsSubscriptions) > 0 {
		for k, _ := range m.SqsSubscriptions {
			dAtA[i] = 0x42
			i++
			v := m.SqsSubscriptions[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTopicData(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTopicData(uint64(len(k))) + msgSize
			i = encodeVarintTopicData(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTopicData(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTopicData(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if len(m.OtherSubscriptions) > 0 {
		for k, _ := range m.OtherSubscriptions {
			dAtA[i] = 0x4a
			i++
			v := m.OtherSubscriptions[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTopicData(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTopicData(uint64(len(k))) + msgSize
			i = encodeVarintTopicData(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTopicData(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTopicData(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func (m *TopicNames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicNames) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, s := range m.Topics {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintTopicData(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Subscription) Size() (n int) {
	var l int
	_ = l
	l = len(m.Arn)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	if m.RawDelivery {
		n += 2
	}
	if m.Pending {
		n += 2
	}
	return n
}

func (m *Topic) Size() (n int) {
	var l int
	_ = l
	l = len(m.Arn)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.Policy)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.DeliveryPolicy)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.EffectiveDeliveryPolicy)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	if m.DeletedSubscriptions != 0 {
		n += 1 + sovTopicData(uint64(m.DeletedSubscriptions))
	}
	if len(m.SqsSubscriptions) > 0 {
		for k, v := range m.SqsSubscriptions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTopicData(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTopicData(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTopicData(uint64(mapEntrySize))
		}
	}
	if len(m.OtherSubscriptions) > 0 {
		for k, v := range m.OtherSubscriptions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTopicData(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTopicData(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTopicData(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TopicNames) Size() (n int) {
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, s := range m.Topics {
			l = len(s)
			n += 1 + l + sovTopicData(uint64(l))
		}
	}
	return n
}

func sovTopicData(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTopicData(x uint64) (n int) {
	return sovTopicData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Subscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopicData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawDelivery", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RawDelivery = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pending = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTopicData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopicData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Topic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopicData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeliveryPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveDeliveryPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveDeliveryPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedSubscriptions", wireType)
			}
			m.DeletedSubscriptions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedSubscriptions |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqsSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SqsSubscriptions == nil {
				m.SqsSubscriptions = make(map[string]*Subscription)
			}
			var mapkey string
			var mapvalue *Subscription
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopicData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTopicData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTopicData
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTopicData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTopicData
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTopicData
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Subscription{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTopicData(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTopicData
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SqsSubscriptions[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OtherSubscriptions == nil {
				m.OtherSubscriptions = make(map[string]*Subscription)
			}
			var mapkey string
			var mapvalue *Subscription
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopicData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTopicData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTopicData
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTopicData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTopicData
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTopicData
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Subscription{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTopicData(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTopicData
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OtherSubscriptions[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopicData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopicData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicNames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopicData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicNames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicNames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopicData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopicData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTopicData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTopicData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTopicData
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTopicData
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTopicData(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTopicData = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTopicData   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("server/snsproto/dbdata/topic_data.proto", fileDescriptor_topic_data_8a03cff7910f518f)
}

var fileDescriptor_topic_data_8a03cff7910f518f = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0xc5, 0x6b, 0x93, 0x75, 0xb7, 0x13, 0x14, 0xd3, 0x31, 0xd3, 0x87, 0x2a, 0x14, 0xd0, 0x2a,
	0x1e, 0x5a, 0x69, 0x7b, 0x41, 0x7b, 0x44, 0xe3, 0x15, 0xa6, 0x0c, 0x21, 0x21, 0x1e, 0xa2, 0x34,
	0xb9, 0x03, 0x6b, 0xc1, 0xce, 0x6c, 0xaf, 0x55, 0xfe, 0x82, 0xff, 0xe0, 0x47, 0x78, 0xe4, 0x13,
	0x50, 0xe1, 0x43, 0x90, 0xed, 0x64, 0x6a, 0x4b, 0x79, 0xda, 0x9b, 0xef, 0x3d, 0xe7, 0x5c, 0x1f,
	0xe7, 0xdc, 0xc0, 0x91, 0x46, 0x35, 0x47, 0x35, 0xd5, 0x42, 0x97, 0x4a, 0x1a, 0x39, 0xcd, 0x67,
	0x79, 0x6a, 0xd2, 0xa9, 0x91, 0x25, 0xcf, 0x12, 0x7b, 0x9c, 0xb8, 0x3e, 0x0d, 0x3d, 0x30, 0xfa,
	0x4e, 0x60, 0xff, 0xe2, 0x66, 0xa6, 0x33, 0xc5, 0x4b, 0xc3, 0xa5, 0xa0, 0x3d, 0x68, 0xa5, 0x4a,
	0x30, 0x12, 0x91, 0xf1, 0x5e, 0x6c, 0x8f, 0xb4, 0x0f, 0x81, 0x5c, 0x08, 0x54, 0x6c, 0xc7, 0xf5,
	0x7c, 0x41, 0x07, 0xd0, 0x41, 0x91, 0x97, 0x92, 0x0b, 0xc3, 0x5a, 0x0e, 0xb8, 0xad, 0x2d, 0xe6,
	0x6e, 0xc9, 0x64, 0xc1, 0xda, 0x1e, 0x6b, 0x6a, 0xfa, 0x14, 0xf6, 0x55, 0xba, 0x48, 0x72, 0x2c,
	0xf8, 0x1c, 0x55, 0xc5, 0x82, 0x88, 0x8c, 0x3b, 0x71, 0x57, 0xa5, 0x8b, 0xb3, 0xba, 0x45, 0x19,
	0xec, 0x96, 0x28, 0x72, 0x2e, 0x3e, 0xb3, 0xd0, 0xa1, 0x4d, 0x39, 0xfa, 0xd3, 0x86, 0xe0, 0xbd,
	0x7d, 0xca, 0x16, 0x9b, 0x14, 0xda, 0x22, 0xfd, 0x8a, 0xb5, 0x4b, 0x77, 0xb6, 0x97, 0xe5, 0x5c,
	0x97, 0x45, 0x5a, 0x25, 0x0e, 0xf3, 0x46, 0xbb, 0x75, 0xef, 0xad, 0xa5, 0x3c, 0x86, 0xb0, 0x94,
	0x05, 0xcf, 0xaa, 0xda, 0x69, 0x5d, 0xd1, 0x23, 0x78, 0xd0, 0x78, 0x4c, 0x6a, 0x42, 0xe0, 0x08,
	0xf7, 0x9b, 0xf6, 0xb9, 0x27, 0x9e, 0xc2, 0x13, 0xbc, 0xbc, 0xc4, 0xcc, 0xf0, 0x39, 0x26, 0x9b,
	0x92, 0xd0, 0x49, 0x0e, 0x6f, 0x09, 0x67, 0xeb, 0xda, 0x13, 0x38, 0xc8, 0xb1, 0x40, 0x83, 0x79,
	0xa2, 0x57, 0x42, 0xd0, 0x6c, 0x37, 0x22, 0xe3, 0x56, 0xdc, 0xaf, 0xc1, 0xd5, 0x80, 0x34, 0x3d,
	0x87, 0x87, 0xfa, 0x5a, 0x6f, 0x08, 0x3a, 0x51, 0x6b, 0xdc, 0x3d, 0x7e, 0x36, 0xf1, 0xb1, 0x4e,
	0xdc, 0x47, 0x9a, 0x5c, 0x5c, 0xeb, 0x35, 0xe9, 0x1b, 0x61, 0x54, 0x15, 0xf7, 0xf4, 0x46, 0x9b,
	0x7e, 0x80, 0x47, 0xd2, 0x7c, 0x41, 0xb5, 0x31, 0x73, 0xcf, 0xcd, 0x7c, 0xb1, 0x3e, 0xf3, 0x9d,
	0x25, 0x6e, 0x99, 0x4a, 0xe5, 0x3f, 0xc0, 0xe0, 0x23, 0x1c, 0x6c, 0xb5, 0x60, 0xd3, 0xbb, 0xc2,
	0xaa, 0x49, 0xef, 0x0a, 0x2b, 0xfa, 0x12, 0x82, 0x79, 0x5a, 0xdc, 0xf8, 0xf8, 0xba, 0xc7, 0xfd,
	0xe6, 0xd2, 0x55, 0x71, 0xec, 0x29, 0xa7, 0x3b, 0xaf, 0xc8, 0xe0, 0x13, 0x1c, 0xfe, 0xc7, 0xc9,
	0xdd, 0x87, 0x8f, 0x9e, 0x03, 0xb8, 0xc7, 0xda, 0x05, 0xd1, 0x76, 0x43, 0xdc, 0xef, 0xa3, 0x19,
	0x89, 0x5a, 0x76, 0x43, 0x7c, 0xf5, 0xba, 0xf7, 0x63, 0x39, 0x24, 0x3f, 0x97, 0x43, 0xf2, 0x6b,
	0x39, 0x24, 0xdf, 0x7e, 0x0f, 0xef, 0xcd, 0x42, 0xb7, 0xe5, 0x27, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xfc, 0x29, 0x3c, 0x47, 0x86, 0x03, 0x00, 0x00,
}
