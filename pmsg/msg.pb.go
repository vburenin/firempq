// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pmsg/msg.proto

package pmsg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MsgMeta struct {
	Serial               uint64   `protobuf:"varint,1,opt,name=serial,proto3" json:"serial,omitempty"`
	StrId                string   `protobuf:"bytes,2,opt,name=str_id,json=strId,proto3" json:"str_id,omitempty"`
	PopCount             int64    `protobuf:"varint,3,opt,name=pop_count,json=popCount,proto3" json:"pop_count,omitempty"`
	ExpireTs             int64    `protobuf:"varint,4,opt,name=expire_ts,json=expireTs,proto3" json:"expire_ts,omitempty"`
	UnlockTs             int64    `protobuf:"varint,5,opt,name=unlock_ts,json=unlockTs,proto3" json:"unlock_ts,omitempty"`
	PayloadFileId        int64    `protobuf:"varint,6,opt,name=payload_file_id,json=payloadFileId,proto3" json:"payload_file_id,omitempty"`
	PayloadOffset        int64    `protobuf:"varint,7,opt,name=payload_offset,json=payloadOffset,proto3" json:"payload_offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgMeta) Reset()         { *m = MsgMeta{} }
func (m *MsgMeta) String() string { return proto.CompactTextString(m) }
func (*MsgMeta) ProtoMessage()    {}
func (*MsgMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_959dd0813f76fa76, []int{0}
}
func (m *MsgMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MsgMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMeta.Merge(dst, src)
}
func (m *MsgMeta) XXX_Size() int {
	return m.Size()
}
func (m *MsgMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMeta.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMeta proto.InternalMessageInfo

func (m *MsgMeta) GetSerial() uint64 {
	if m != nil {
		return m.Serial
	}
	return 0
}

func (m *MsgMeta) GetStrId() string {
	if m != nil {
		return m.StrId
	}
	return ""
}

func (m *MsgMeta) GetPopCount() int64 {
	if m != nil {
		return m.PopCount
	}
	return 0
}

func (m *MsgMeta) GetExpireTs() int64 {
	if m != nil {
		return m.ExpireTs
	}
	return 0
}

func (m *MsgMeta) GetUnlockTs() int64 {
	if m != nil {
		return m.UnlockTs
	}
	return 0
}

func (m *MsgMeta) GetPayloadFileId() int64 {
	if m != nil {
		return m.PayloadFileId
	}
	return 0
}

func (m *MsgMeta) GetPayloadOffset() int64 {
	if m != nil {
		return m.PayloadOffset
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgMeta)(nil), "pmsg.MsgMeta")
}
func (m *MsgMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Serial != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Serial))
	}
	if len(m.StrId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.StrId)))
		i += copy(dAtA[i:], m.StrId)
	}
	if m.PopCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.PopCount))
	}
	if m.ExpireTs != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.ExpireTs))
	}
	if m.UnlockTs != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.UnlockTs))
	}
	if m.PayloadFileId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.PayloadFileId))
	}
	if m.PayloadOffset != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.PayloadOffset))
	}
	return i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MsgMeta) Size() (n int) {
	var l int
	_ = l
	if m.Serial != 0 {
		n += 1 + sovMsg(uint64(m.Serial))
	}
	l = len(m.StrId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.PopCount != 0 {
		n += 1 + sovMsg(uint64(m.PopCount))
	}
	if m.ExpireTs != 0 {
		n += 1 + sovMsg(uint64(m.ExpireTs))
	}
	if m.UnlockTs != 0 {
		n += 1 + sovMsg(uint64(m.UnlockTs))
	}
	if m.PayloadFileId != 0 {
		n += 1 + sovMsg(uint64(m.PayloadFileId))
	}
	if m.PayloadOffset != 0 {
		n += 1 + sovMsg(uint64(m.PayloadOffset))
	}
	return n
}

func sovMsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			m.Serial = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serial |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopCount", wireType)
			}
			m.PopCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PopCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTs", wireType)
			}
			m.ExpireTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockTs", wireType)
			}
			m.UnlockTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadFileId", wireType)
			}
			m.PayloadFileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayloadFileId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadOffset", wireType)
			}
			m.PayloadOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayloadOffset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pmsg/msg.proto", fileDescriptor_msg_959dd0813f76fa76) }

var fileDescriptor_msg_959dd0813f76fa76 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xc8, 0x2d, 0x4e,
	0xd7, 0xcf, 0x2d, 0x4e, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xf1, 0x95, 0xee,
	0x31, 0x72, 0xb1, 0xfb, 0x16, 0xa7, 0xfb, 0xa6, 0x96, 0x24, 0x0a, 0x89, 0x71, 0xb1, 0x15, 0xa7,
	0x16, 0x65, 0x26, 0xe6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x04, 0x41, 0x79, 0x42, 0xa2, 0x5c,
	0x6c, 0xc5, 0x25, 0x45, 0xf1, 0x99, 0x29, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0xac, 0xc5,
	0x25, 0x45, 0x9e, 0x29, 0x42, 0xd2, 0x5c, 0x9c, 0x05, 0xf9, 0x05, 0xf1, 0xc9, 0xf9, 0xa5, 0x79,
	0x25, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x1c, 0x05, 0xf9, 0x05, 0xce, 0x20, 0x3e, 0x48,
	0x32, 0xb5, 0xa2, 0x20, 0xb3, 0x28, 0x35, 0xbe, 0xa4, 0x58, 0x82, 0x05, 0x22, 0x09, 0x11, 0x08,
	0x29, 0x06, 0x49, 0x96, 0xe6, 0xe5, 0xe4, 0x27, 0x67, 0x83, 0x24, 0x59, 0x21, 0x92, 0x10, 0x81,
	0x90, 0x62, 0x21, 0x35, 0x2e, 0xfe, 0x82, 0xc4, 0xca, 0x9c, 0xfc, 0xc4, 0x94, 0xf8, 0xb4, 0xcc,
	0x9c, 0x54, 0x90, 0xb5, 0x6c, 0x60, 0x25, 0xbc, 0x50, 0x61, 0xb7, 0xcc, 0x9c, 0x54, 0xcf, 0x14,
	0x21, 0x55, 0x2e, 0x3e, 0x98, 0xba, 0xfc, 0xb4, 0xb4, 0xe2, 0xd4, 0x12, 0x09, 0x76, 0x14, 0x65,
	0xfe, 0x60, 0x41, 0x27, 0x81, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48,
	0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x24, 0x36, 0xb0, 0xff, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x81, 0x6a, 0x1c, 0xa0, 0x11, 0x01, 0x00, 0x00,
}
